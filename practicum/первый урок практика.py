from math import factorial as fact
from random import randint as rnd

# 1.
# Чтобы оценить затраты на обслуживание огорода, необходимо уточнить его размеры.
# Предполагается, что огороды всегда прямоугольные.
# Напишите две функции:
# функция get_rectangle_area() должна получить на вход длину и ширину огорода и вернуть его площадь;
# функция get_rectangle_perimeter() должна получить на вход длину и ширину огорода и вернуть его периметр.
# Функции должны не печатать результат, а возвращать его.
# В коде заготовлены значения длины и ширины. Вызовите функции get_rectangle_area() и get_rectangle_perimeter() с аргументами length и width и напечатайте результаты вызовов в таком формате (только числа будут другие):

# Площадь: 32
# Периметр: 24 

def get_rectangle_area(length,width):
    rectangle_area = length * width
    return rectangle_area

def get_rectangle_perimeter(length,width):
    rectangle_perimeter = 2 * (length + width)
    return rectangle_perimeter
# Длина прямоугольника.
length = 5
# Ширина прямоугольника.
width = 10

print('Площадь:', str(get_rectangle_area(length,width)))
print('Периметр:', str(get_rectangle_perimeter(length,width)))

# 2.
# Правильный полив — ключ к здоровью растений!
# Разные виды овощей требуют разного количества воды, и поливать огород надо по науке. 
# Известно, сколько воды требуется для одного растения каждого вида, — и теперь нужна программа, которая рассчитает общее количество воды, необходимое для полива нескольких растений.
# Например, на один куст огурцов нужно 3 литра воды. На огороде — 20 таких кустов. Программа должна провести вычисления: 3 * 20 — и напечатать понятно оформленный ответ.
# Напишите функцию calculate_watering(), которая принимает три параметра:
# plant_type: название растения (например, «Помидоры» или «Ананасы»).
# number_of_plants: общее количество растений.
# volume_per_plant: количество воды в литрах, необходимое для одного растения. Это необязательный параметр. Значение этого параметра по умолчанию должно быть 2.5 (такого объёма воды в среднем должно хватить любому растению).
# Функция calculate_watering() должна вычислить общее количество воды, необходимое для полива, и напечатать строку:
# <название_растения> <количество_растений> шт.: для полива требуется <количество_воды> л воды. 
# Например:

# # При таком вызове:
# calculate_watering('Огурцы', 20, 3)

# # ...функция calculate_watering() должна напечатать строку
# # Огурцы 20 шт.: для полива требуется 60 л воды. 
# Функция calculate_watering() не должна возвращать никаких значений.

# Опишите параметры функции calculate_watering().
def calculate_watering(plant_type,number_of_plants,volume_per_plant=2.5):
    # Здесь вместо ellipsis напишите код функции.
    print(plant_type, number_of_plants, 'шт.:', 'для полива требуется', number_of_plants*volume_per_plant, 'л воды.')
# но лучше вот так 
    print(f'{plant_type} {number_of_plants} шт.: для полива требуется {number_of_plants * volume_per_plant} л воды.')
# Не изменяйте код ниже этого комментария: 
# если ваша функция написана правильно - эти вызовы должны успешно сработать.

# Вызов функции с позиционными аргументами:
calculate_watering('Артишоки', 20, 4)

# Вызов функции с позиционными аргументами, без опционального:
calculate_watering('Кивано', 15)

# Вызов функции с именованными аргументами, без опционального:
calculate_watering(number_of_plants=15, plant_type='Тыквы')

print(fact(7))

# Напишите программу для вычисления факториала случайного целого числа в диапазоне от 1 до 10 включительно. 
# Из модуля math импортируйте функцию, вычисляющую факториал числа; задайте ей псевдоним fact.
# Из модуля random импортируйте функцию, возвращающую случайное целое число; задайте ей псевдоним rnd.
# Ваша программа должна выводить результат на печать в таком виде:
# Факториал 5 равен 120 
# Соблюдайте правила оформления кода: после строк с импортом — две пустые строки.
char = rnd(1,11)
print(f'Факториал {char} равен {fact(char)} ')

# Напишите функцию analyze_skills(), которая 
# найдёт минимальное значение среди перечисленных переменных,
# найдёт максимальное значение среди перечисленных переменных,
# напечатает две строки:

# Доля питонистов, у которых есть наименее популярный навык (в %): <мин.число>
# Доля питонистов, у которых есть наиболее популярный навык (в %): <макс.число> 
# Название навыка печатать не нужно. 
# Функция не должна возвращать никакого значения.
# Многоточия из прекода нужно удалить.

bash = 31
c_and_c_plus_plus = 29
c_sharp = 11
html_css = 36
java = 19
javascript = 37
sql = 34
minimum = min(bash, c_and_c_plus_plus, c_sharp, html_css, java, javascript, sql)
maximum = max(bash, c_and_c_plus_plus, c_sharp, html_css, java, javascript, sql)
def analyze_skills():
    print(f'Доля питонистов, у которых есть наименее популярный навык (в %): {minimum}')
    print(f'Доля питонистов, у которых есть наиболее популярный навык (в %): {maximum}')
    
#     # Среди всех переменных найдите минимальное и максимальное значение.
#     # Напечатайте фразы, описанные в задании (две строки).
analyze_skills() 
bash = 31
c_and_c_plus_plus = 29
c_sharp = 11
html_css = 36
java = 19
javascript = 37
sql = 34


def analyze_skills():
    print(f'Доля питонистов, у которых есть наименее популярный навык (в %): {min(bash, c_and_c_plus_plus, c_sharp, html_css, java, javascript, sql)}')
    print(f'Доля питонистов, у которых есть наиболее популярный навык (в %): {max(bash, c_and_c_plus_plus, c_sharp, html_css, java, javascript, sql)}')
    
# Не удаляйте вызов функции.
analyze_skills()


# а лучше всего вот так 
bash = 31
c_and_c_plus_plus = 29
c_sharp = 11
html_css = 36
java = 19
javascript = 37
sql = 34
skills = [bash, c_and_c_plus_plus, c_sharp, html_css, java, javascript, sql]

def analyze_skills():
    print(f"Наименее популярный навык (в %): {min(skills)}")
    print(f"Наиболее популярный навык (в %): {max(skills)}")

# Не удаляйте вызов функции.
analyze_skills()

# 2.
# Начинающий, но в будущем успешный разработчик никак не угомонится. «А правильно ли было выбрать Python? Может, надо было заняться изучением Java или даже C#? Посмотрю статистику по вакансиям».
# В Интернете нашлось исследование: всемирный рейтинг языков программирования по числу вакансий. Вакансий много, их количество указано в тысячах:

# c_sharp = 375
# java = 546
# javascript = 915
# ... 
# Допишите функцию analyze_jobs(), в ней обработайте переменные, в которых хранится количество вакансий:
# подсчитайте суммарное количество вакансий для перечисленных языков программирования,
# подсчитайте процент вакансий для Python от числа всех исследованных вакансий,
# с помощью встроенной функции round() округлите вычисленный процент до двух знаков после запятой (до сотых долей),
# дважды вызовите print(), чтобы напечатать фразы:
# Общее число исследованных вакансий, в тысячах: <сумма_всех_вакансий>
# Вакансии для Python-разработчиков, в %: <процент_вакансий_для_Python> 

# Количество вакансий для различных языков программирования:
c_sharp = 375
java = 546
java_script = 915
php = 288
python = 603
jobs = [c_sharp, java, java_script, php, python]
def analyze_jobs():
    # Вычислите общее количество исследованных вакансий.
    total_jobs = sum(jobs)
    # Вычислите процент вакансий для Python от общего числа вакансий
    # и округлите результат до двух знаков (до сотых долей):
    python_percent = round((python / total_jobs) * 100, 2)
    # Напечатайте фразы, описанные в задании (две строки).
    print(f'Общее число исследованных вакансий, в тысячах: {total_jobs}')
    print(f'Вакансии для Python-разработчиков, в %: {python_percent}')

analyze_jobs()


def get_dumplings_recommendation():
    return rnd(10,20)
# Вызвать функцию get_dumplings_recommendation() и напечатать заданную фразу.
# dumplings = get_dumplings_recommendation()
print(f'Оптимальным количеством пельменей на сегодня будет {get_dumplings_recommendation()}')

def get_dumplings_recommendation(min,max):
    return rnd(min,max)
# Вызвать функцию get_dumplings_recommendation() и напечатать заданную фразу.
# dumplings = get_dumplings_recommendation(25,30)
print(f'Оптимальным количеством пельменей на сегодня будет {get_dumplings_recommendation(25,30)}')

# Эта функция должна возвращать cтроку "Hello"
def say_hello():
    return 'Hello'


# Эта функция должна возвращать строку "World!" (с восклицательным знаком).
def say_world():
    return 'World!'

    # В переменной result должна быть фраза Hello, World!
    # А функция print() должна вывести эту фразу на экран.


hello_text = say_hello()
result = say_hello() + ', ' + say_world()
print(result)